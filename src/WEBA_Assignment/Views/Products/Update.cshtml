<div class="row">
    <div class="col-md-12">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <div class="panel-title">Update Product Record</div>
            </div>
            <div class="panel-body">
                <form id="dataForm" role="form" class="form-horizontal">
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-2" for="prodNameInput">Product Name</label>
                        <div class="form-group col-md-9">
                            <input type="text" name="prodNameInput" id="prodNameInput" class="form-control font-bold"
                                   maxlength="50" placeholder="Product Name" value="" />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="metricNameInputBox">
                        <label class="control-label col-md-2" for="metricNameInput">Metric Name</label>
                        <div class="form-group col-md-9">
                            <input type="text" name="metricNameInput" id="metricNameInput" class="form-control font-bold"
                                   maxlength="50" placeholder="Unit name of Product (eg. KG)" value="" />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="qtyInputBox">
                        <label class="control-label col-md-2" for="qtyInput">Quantity</label>
                        <div class="form-group col-md-9">
                            <input type="number" min="0" name="qtyInput" id="qtyInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Quantity" value="" />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="tiqInputBox">
                        <label class="control-label col-md-2" for="tiqInput">TIQ</label>
                        <div class="form-group col-md-10">
                            <input type="number" min="0" name="tiqInput" id="tiqInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Threshold Inventory Quantity" value="" />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="priceInputBox">
                        <label class="control-label col-md-2" for="priceInput">Price</label>
                        <div class="form-group col-md-9">
                            <input type="text" name="priceInput" id="priceInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Price" value="" />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="rrpInputBox">
                        <label class="control-label col-md-2" for="rrpInput">RRP</label>
                        <div class="form-group col-md-9">
                            <input type="text" name="rrpInput" id="rrpInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Recommended Retail Price" value="" />
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-2 photoUploadMarginFixProducts" for="brandInput">Brand</label>
                        <div class="col-md-5">
                            <div id="brandInput" class="form-group">

                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-2 photoUploadMarginFixProducts" for="fileInput">Photo</label>
                        <div class="col-md-9">
                            <input id="fileInput" name="fileInput" type="file" class="file input-group-lg" multiple />
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-2" for="productProperties">Properties</label>
                        <div id="checkboxContainer" class="col-md-10">
                            <div class="ui slider checkbox">
                                <input type="checkbox" id="publishCheck">
                                <label>Publish product upon save</label>
                            </div><br>
                            <div class="ui slider checkbox">
                                <input type="checkbox" id="descriptionCheck">
                                <label>Product has a description</label>
                            </div><br>
                            <div class="ui slider checkbox">
                                <!-- A Product does not need to comply with the metrics system.
                                In such cases, we'll be creating a row within metrics without
                                any properties and just throw in it's price into the row. -->
                                <input type="checkbox" id="metricsCheck">
                                <label>Product has many variations</label>
                            </div><br>
                            <div class="ui slider checkbox">
                                <input type="checkbox" id="consumableCheck">
                                <label>Product is a consumable</label>
                            </div><br>
                            <div class="ui slider checkbox">
                                <input type="checkbox" id="specialsCheck">
                                <label>Product has a special promotion</label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-12 hidden" id="descriptionBox">
                        <label class="control-label col-md-2" for="descBox">Description</label>
                        <div class="form-group col-md-9">
                            <textarea name="descriptionBox" id="descriptionBox"></textarea>
                        </div>
                    </div>
                    <div class="form-group col-md-12 hidden" id="metricSegment">
                        <label class="control-label col-md-1" for="dataTable">Metrics</label>
                        <div class="col-md-11">
                            <table id="dataTable" class="table table-hover">
                                <div id="rowBtn" class="pull-right big ui secondary button">
                                    New Row
                                </div>
                                <thead>
                                    <tr>
                                        <th>Metrics Name</th>
                                        <th>Metric Type</th>
                                        <th>Quantity</th>
                                        <th>Status</th>
                                        <th>Price per type</th>
                                        <th>RRP</th> <!-- Recommended Retail Price -->
                                        <th>&nbsp;</th>
                                    </tr>
                                </thead>
                                <tbody id="metricsTableBody"></tbody>
                            </table>
                        </div>
                    </div>

                    <div class="form-group col-md-12 hidden" id="specialsBox">
                        <label class="control-label col-md-2 photoUploadMarginFixProducts" for="specialInput">Specials</label>
                        <div class="col-md-6">
                            <div id="specialInput" class="form-group">

                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-1"></label>
                        <div class="col-md-10">
                            <div class="pull-right">
                                <input type="button" class="btn btn-primary" value="Save" id="saveButton" />
                                <a class="btn btn-default" asp-action="Index" asp-controler="Products">Cancel</a>
                            </div>
                        </div>
                    </div>
            </div>
            </form>
        </div><!-- end of div element which has the class="panel-body" -->
    </div><!-- end of the div element which has the class="panel" -->
</div><!-- end of the div element which as the  class="col-md-offset-2 col-sm-8"-->
</div><!-- end of div element with class="row" -->


<script>
    getProductDetails()

    //Declare a document scope variable, g_catId.
    //A document scope variable value can be accessed anywhere in the web page during the
    //entire life cycle at the web browser (till the user refresh the page)
    //Naming convention: begin with g_ prefix
    //This variable will contain the student id value
    //which will be extracted from the address bar.
    //The variable will be used in the first Ajax() call, to retrieve JSON structured
    //information about the student
    var g_prodId = getProdIdFromAddressBar();
    function getProdIdFromAddressBar() {
        //Get studentId from the url string in the browser's address bar
        var urlArray = window.location.href.split('/');
        var prodId = urlArray[urlArray.length - 1];
        return prodId;
    };

    function getProductDetails() {
        $loadProductHandler = jQuery.ajax({
            type: 'GET',
            url: '/API/Products/' + g_prodId,
            dataType: 'json',
            cache: false,
        })
        $loadProductHandler.done(function (data, textStatus, jqXHR) {
            var product = data;
            console.dir(product);
            return;
            //Copy out the product information
            var ProdName = product.prodName;
            var Description = product.description;
            var BrandId = product.brand.brandId;
            var Brand = product.brand;
            var Quantity = product.quantity; 
            var TiQ = product.thresholdInventoryQuantity;
            var Metrics = product.metrics;
            var ProductPhotos = product.productPhotos;
            var isConsumable = product.isConsumable;
            var Published = product.published;
            var Special = product.special;

            //Populate the respective input controls with the user details.
            //For example, find the text input control, catNameInput and set the text input control
            //'s value with the catName variable's content.
            $('#prodNameInput').val(ProdName);


        })//end of the done() method;
        $loadProductHandler.fail(function (data, textStatus, jqXHR) {
            swal("Oh no!", "The product failed to load!", "error");
        });//end of $loadCategoryHandler.error()
    }//end of getCategoryDetails();

    //Using a function to create a JavaScript class, WebFormData
    function WebFormData(inCatName, inVisibilityId, inStartDate, inEndDate) {
        this.CatName = inCatName;
        this.VisibilityId = inVisibilityId;
        this.StartDate = inStartDate;
        this.EndDate = inEndDate;
    }

    $('#saveButton').on('click', function () {
        var collectedCatName = $('#catNameInput').val().toUpperCase(); // Forces an Upper Case Only String
        if (collectedCatName == null || collectedCatName == "") {
            swal("Error!", "Please key in an appropriate category name!", "error")
            return; // Break out of the function
        }
        // VisibilityIds do not have to be checked as it has been automatically check before the user does
        // anything
        var collectedVisibilityId = $('input[name="Visibility"]:checked').val();
        //Create a WebFormData object, webFormData. Have its field values
        //populated with the collected student data
        if (collectedVisibilityId == 3) {
            // We only need to define these two variables if VisibilityId is 3.
            // jqWidgets does the automated filling before the user does anything.
            // Checks are not needed as we will restrict the dates to only today or the future
            // and exclude the past dates.
            var collectedStartDate = moment(startDateInput).format("DD/MM/YYYY");
            var collectedEndDate = moment(endDateInput).format("DD/MM/YYYY");

            // Date Checking is done Server-Sided
            //
            // Update 01 Jul 2016
            //
            // Reason 1:
            // Moment Js is 150 times slower than javascript
            // Proof of Concept: http://jsperf.com/momentjs-isafter-performance
            //
            // Reason 2:
            // http://stackoverflow.com/questions/25310242/moment-js-isafter-performance
            //
            // Reason 3:
            // SECURITY
            var webFormData = new WebFormData(collectedCatName, collectedVisibilityId, collectedStartDate, collectedEndDate);
            } else {
                var webFormData = new WebFormData(collectedCatName, collectedVisibilityId, null, null);
            }
        //Convert the webFromData into a JSON string
        var webFormDataInString = JSON.stringify(webFormData);

        $updateCategoryHandler = jQuery.ajax({
            type: 'PUT',
            url: '/API/Categories/' + g_catId,
            dataType: 'json',
            contentType: 'application/json;',
            data: "'" + webFormDataInString + "'"
        })//end of jQuery.ajax() call
        $updateCategoryHandler.done(function (data, textStatus, jqXHR) {
            swal("Good job!", "You've updated an amazing category!", "success")
        });//end of $updateCategoryHandler.done()

        $updateCategoryHandler.error(function (data, textStatus, jqXHR) {
            swal("Oh no!", data.responseJSON.message, "error");
        });//end of $updateCategoryHandler.error()

    });// end of $('#saveButton').on('click', function () { ...}


    $('#deleteButton').on('click', function () {
        swal({
            title: "Are you sure?",
            text: "You will not be able to recover this imaginary file!",
            type: "warning", showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Yes, delete it!",
            closeOnConfirm: false
        }, function () {
            $deleteCategoryHandler = jQuery.ajax({
                type: 'DELETE',
                url: '/API/Categories/' + g_catId
            })//end of jQuery.ajax() call
            $deleteCategoryHandler.done(function (data, textStatus, jqXHR) {
                swal("Deleted!", "Your imaginary file has been deleted.", "success");
            });//end of $deleteCategoryHandler.done()

            $deleteCategoryHandler.fail(function (data, textStatus, jqXHR) {
                console.log(data);
                noty({
                    text: data.responseJSON.Message, type: 'error',
                    layout: 'center',
                    template: '<div class="noty_message"><span class="noty_text"></span>'
                });//end of noty()
            });//end of $deleteCategoryHandler.fail()
        });
        

    });// end of $('#deleteButton').on('click', function () { ...}
    function redirectPage() {
        location.replace('/Categories/Index');
    }// end of redirectPage() method (function)
</script>




