<div class="row">
    <div class="col-md-12">
        <div id="infoBox" class="alert alert-info" role="alert">
            <strong>Please check the properties first before filling up the page.</strong>
        </div>
        <div class="alert alert-warning alert-dismissible" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <strong>
                Not entering any input in either Quantity or Threshold Inventory Quantity<br />
                will be automatically replaced with 0.
            </strong>
        </div>
        <div id="errorBox" class="alert alert-danger alert-dismissable hidden" role="alert">
            <h2 style="font-family: 'Trebuchet MS'"><b>Hey there! You didn't key in some thing/s right. :(</b></h2>
            <div id="errorBoxText">
                <!-- Let us store client sided error messages for input validation here :)) -->
            </div>
        </div>
        <div class="panel panel-primary">
            <div class="panel-heading">
                <div class="panel-title">Create Product Record</div>
            </div>
            <div class="panel-body">
                <form id="dataForm" data-toggle="validator" role="form" class="form-horizontal">
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-2" for="prodNameInput">Product Name</label>
                        <div class="form-group col-md-9">
                            <input type="text" name="prodNameInput" id="prodNameInput" class="form-control font-bold"
                                   maxlength="50" placeholder="Product Name" value="" required />
                        </div>
                    </div>

                    <div class="form-group col-md-12">
                        <label class="control-label col-md-2 photoUploadMarginFixProducts" for="brandInput">Brand</label>
                        <div class="col-md-5">
                            <div id="brandInput" class="form-group">

                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-12" id="categoryBox">
                        <label class="control-label col-md-2" for="categorySuggest">Categories</label>
                        <div class="form-group col-md-4">
                            <div id="categorySuggest" class="form-control ms-ctn categorySuggest">

                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-12" id="statusBox">
                        <label class="control-label col-md-2" for="statusSuggest">Status</label>
                        <div class="form-group col-md-4">
                            <div id="statusSuggest" class="form-control ms-ctn statusSuggest">

                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-12">
                        <label class="control-label col-md-2" for="productProperties">Properties</label>
                        <div id="checkboxContainer" class="col-md-10">
                            <div>
                                <input type="checkbox" id="publishCheck" data-toggle="toggle" data-class="fast">
                                <label>Publish product upon save</label>
                                <!-- Empty div box for identifying publish status-->
                                <div id="publishBox" class="hidden"></div>
                            </div><br>
                            <div>
                                <input type="checkbox" id="savingsOverviewCheck" data-toggle="toggle" data-class="fast">
                                <label>Product has Savings Overview</label>

                                <div class="form-group col-md-12 hidden" id="savingsOverviewBox">
                                    <!--<label class="control-label col-md-2" for="descBox">Description</label>-->
                                    <div class="form-group col-md-10">
                                        <textarea class="tinymceStart" name="savingsOverviewEditor" id="savingsOverviewEditor"></textarea>
                                    </div>
                                </div>

                            </div><br />
                            <div>
                                <input type="checkbox" id="descriptionCheck" data-toggle="toggle" data-class="fast">
                                <label>Product has a description</label>

                                <div class="form-group col-md-12 hidden" id="descriptionBox">
                                    <!--<label class="control-label col-md-2" for="descBox">Description</label>-->
                                    <div class="form-group col-md-10">
                                        <textarea class="tinymceStart" name="descriptionEditor" id="descriptionEditor"></textarea>
                                    </div>
                                </div>

                            </div><br>
                            <div>
                                <!-- A Product does not need to comply with the metrics system.
                                In such cases, we'll be creating a row within metrics without
                                any properties and just throw in it's price into the row. -->
                                <input type="checkbox" id="metricsCheck" data-toggle="toggle" data-class="fast">
                                <label>Product has many variations</label>


                                <div class="form-group col-md-12 hidden" id="metricSegment">
                                    <!--<label class="control-label col-md-1" for="dataTable">Metrics</label>-->
                                    <div class="col-md-11">
                                        <table id="dataTable" class="table table-hover">
                                            <button type="button" id="customRowBtn" class="pull-right btn btn-default">
                                                New Custom Row
                                            </button>
                                            <button type="button" id="rowBtn" class="pull-right btn btn-default" style="margin-right: 15px;">
                                                New Row
                                            </button>
                                            <thead>
                                                <tr>
                                                    <th>Metric Amount</th>
                                                    <th>Metric Type</th>
                                                    <th>Quantity</th>
                                                    <th>Status</th>
                                                    <th>Price per type</th>
                                                    <th>RRP</th> <!-- Recommended Retail Price -->
                                                    <th>&nbsp;</th>
                                                </tr>
                                            </thead>
                                            <tbody id="metricsTableBody"></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div><br>
                            <div>
                                <input type="checkbox" id="consumableCheck" data-toggle="toggle" data-class="fast">
                                <label>Product is a consumable</label>

                                <!-- Will have to implement a few more TinyMCE elements here for Consumables -->
                                <div class="form-group col-md-12 hidden" id="consumableContainer" name="consumableContainer">
                                    <!--<label class="control-label col-md-2" for="descBox">Description</label>-->
                                    <label class="col-md-push-4 control-label left" for="typicalAnalysisBox">Typical Analysis</label>
                                    </br>
                                    <div class="form-group col-md-12">
                                        <textarea class="tinymceStart" name="typicalAnalysisBox" id="typicalAnalysisBox"></textarea>
                                    </div>
                                    <label class="col-md-push-4 control-label left" for="guranteedAnalysisBox">Guranteed Analysis</label>
                                    </br>
                                    <div class="form-group col-md-12">
                                        <textarea class="tinymceStart" name="guranteedAnalysisBox" id="guranteedAnalysisBox"></textarea>
                                    </div>
                                    <label class="col-md-push-4 control-label left" for="ingredientsBox">Ingredients</label>
                                    </br>
                                    <div class="form-group col-md-12">
                                        <textarea class="tinymceStart" name="ingredientsBox" id="ingredientsBox"></textarea>
                                    </div>
                                    <label class="col-md-push-4 control-label left" for="activeIngredientsBox">Active Ingredients</label>
                                    </br>
                                    <div class="form-group col-md-12">
                                        <textarea class="tinymceStart" name="activeIngredientsBox" id="activeIngredientsBox"></textarea>
                                    </div>
                                    <label class="col-md-push-4 control-label left" for="inActiveIngredientsBox">In-Active Ingredients</label>
                                    </br>
                                    <div class="form-group col-md-12">
                                        <textarea class="tinymceStart" name="inActiveIngredientsBox" id="inActiveIngredientsBox"></textarea>
                                    </div>
                                </div>

                            </div><br>
                            <div>
                                <input type="checkbox" id="specialsCheck" data-toggle="toggle" data-class="fast">
                                <label>Product has a special promotion</label>

                                <!-- Probably the same method like the Metrics Dynamic Table -->

                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-12" id="metricAmountBox">
                        <label class="control-label col-md-2" for="metricAmountInput">Metric Amount</label>
                        <div class="form-group col-md-9">
                            <input type="number" min="0" name="metricAmountInput" id="metricAmountInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Amount Per Type" value="" required />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="metricTypeInputBox">
                        <label class="control-label col-md-2" for="metricTypeInput">Metric Type</label>
                        <div id="metricType" class="form-group col-md-4">
                            <div id="pMetricSuggest" class="form-control ms-ctn pMetricSuggest">

                            </div>
                            <input type="text" name="customMetricTypeInput" id="customMetricTypeInput" class="form-control font-bold hidden"
                                   maxlength="50" placeholder="Unit Type (eg. Black)" value="" />
                        </div>
                        <div class="form-group col-md-offset-8">
                            <input type="checkbox" style="padding-left: 10px;" data-toggle="toggle" data-class="fast" name="customUnitSwitch" id="customUnitSwitch">
                            <label>Custom Unit</label>
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="stockBox">
                        <label class="control-label col-md-2" for="qtyInput">Stock</label>
                        <div class="form-group col-md-9">
                            <input type="number" min="0" name="qtyInput" id="qtyInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Stock" value="" required />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="tiqInputBox">
                        <label class="control-label col-md-2" for="tiqInput">TIQ</label>
                        <div class="form-group col-md-10">
                            <input type="number" min="0" name="tiqInput" id="tiqInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Threshold Inventory Quantity" value="" required />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="priceInputBox">
                        <label class="control-label col-md-2" for="priceInput">Price</label>
                        <div class="form-group input-group col-md-9">
                            <span class="input-group-addon">$</span>
                            <input type="text" name="priceInput" id="priceInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Price" value="" pattern="^[0-9]{1,19}\.[0-9]{1,4}$|^[0-9]{1,19}$" required />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="rrpInputBox">
                        <label class="control-label col-md-2" for="rrpInput">RRP</label>
                        <div class="form-group input-group col-md-9">
                            <span class="input-group-addon">$</span>
                            <input type="text" name="rrpInput" id="rrpInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Recommended Retail Price" value="" pattern="^[0-9]{1,19}\.[0-9]{1,4}$|^[0-9]{1,19}$" required />
                        </div>
                    </div>

                    <div class="form-group col-md-12">
                        <label class="control-label col-md-2 photoUploadMarginFixProducts" for="fileInput">Photo</label>
                        <div class="col-md-9">
                            <input id="fileInput" name="fileInput" type="file" class="file input-group-lg" multiple />
                        </div>
                    </div>

                    <div class="form-group col-md-12 hidden" id="specialsBox">
                        <label class="control-label col-md-2 photoUploadMarginFixProducts" for="specialInput">Specials</label>
                        <div class="col-md-6">
                            <div id="specialInput" class="form-group">

                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-1"></label>
                        <div class="col-md-10">
                            <div class="pull-right">
                                <input type="button" class="btn btn-primary" value="Save" id="saveButton" />
                                <a class="btn btn-default" asp-action="Index" asp-controler="Products">Cancel</a>
                            </div>
                        </div>
                    </div>
            </div>
            </form>
        </div><!-- end of div element which has the class="panel-body" -->
    </div><!-- end of the div element which has the class="panel" -->
</div><!-- end of the div element which as the  class="col-md-offset-2 col-sm-8"-->
</div><!-- end of div element with class="row" -->

<script>
    var customMetric = 0;
    var PresetMetricData = [];
    var StatusData = [];
    var metricsTable = $('#metricSegment');

    // We define the li elements to parse into
    var $presetElements = '';
    var $statusElements = '';

    tinymce.init({
        selector: '.tinymceStart',
        height: 250,
        theme: 'modern',
        plugins: [
          'advlist autolink lists link image charmap print preview hr anchor pagebreak',
          'searchreplace wordcount visualblocks visualchars code fullscreen',
          'insertdatetime media nonbreaking save table contextmenu directionality',
          'emoticons template paste textcolor colorpicker textpattern imagetools'
        ],
        toolbar1: 'insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
        toolbar2: 'print preview media | forecolor backcolor emoticons',
        image_advtab: true,
        //content_css: [
        //  '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
        //  '//www.tinymce.com/css/codepen.min.css'
        //]
    });

    // MagicSuggest for Categories.
    var msCategoryList = $('#categorySuggest').magicSuggest({
        method: 'get',
        data: 'http://localhost:5008/API/Categories',
        dataType: 'json',
        displayField: 'catName',
        valueField: 'catId',
        allowFreeEntries: false,
        autoSelect: false
    });

    var pMetricSuggest = $('#pMetricSuggest').magicSuggest({
        required: true,
        style: 'border-radius: 0 !important',
        maxSelection: 1,
        allowFreeEntries: false,
        method: 'get',
        data: 'http://localhost:5008/API/PresetMetrics',
        dataType: 'json',
        displayField: 'metricSubType',
        valueField: 'metricSubType',
        groupBy: 'metricType',
        renderer: function (data) {
            return '<div style="padding: 5px;">' +
                //'<div style="float: left;"><img height="75px" width="75px" src="' + data.photoUrl + '" /></div>' +
                '<div style="float: left; margin-left: 5px">' +
                    '<div style="font-weight: bold; color: #333; font-size: 15px; line-height: 11px">' + data.metricSubType + '</div>' +
                    '<div style="color: #999; font-size: 9px">' + data.metricType + '</div>' +
                '</div>' +
            '</div><div style="clear:both;"></div>'; // make sure we have closed our dom stuff
        }
    });

    // Status Magic Suggest Initializer
    $('.statusSuggest').magicSuggest({
        required: true,
        style: 'border-radius: 0 !important',
        maxSelection: 1,
        allowFreeEntries: false,
        method: 'get',
        data: 'http://localhost:5008/API/Status',
        dataType: 'json',
        displayField: 'statusName',
        valueField: 'statusName',
        renderer: function (data) {
            return '<div style="padding: 5px;">' +
                //'<div style="float: left;"><img height="75px" width="75px" src="' + data.photoUrl + '" /></div>' +
                '<div style="float: left; margin-left: 5px">' +
                    '<div style="font-weight: bold; color: #333; font-size: 15px; line-height: 11px">' + data.statusName + '</div>' +
                    //'<div style="color: #999; font-size: 9px">' + data.metricType + '</div>' +
                '</div>' +
            '</div><div style="clear:both;"></div>'; // make sure we have closed our dom stuff
        }
    });

    // Status GET Method
    var $dCTForStatus = jQuery.ajax({
        contentType: 'application/json',
        method: 'get',
        url: 'http://localhost:5008/API/Status',
    });
    $dCTForStatus.done(function (data, textStatus, jqXHR) {
        for (i = 0; i < data.length; i++) {
            var liElement = "";
            var status = data[i];
            StatusData.push(status);

            // Toss the data into the element storage variable as well
            liElement = "<option value=" + status.statusId + ">" + status.statusName + "</option>";

            $statusElements += liElement;
        }
        $('metricTypeInput').append($statusElements);

    });
    $dCTForStatus.fail(function (data, textStatus, jqXHR) {
        swal("Oh no!", data.message, "error");
    });

    // PresetMetric GET Method
    var $dCTForPresetMetrics = jQuery.ajax({
        contentType: 'application/json',
        method: 'get',
        url: 'http://localhost:5008/API/PresetMetrics',
    });
    $dCTForPresetMetrics.done(function (data, textStatus, jqXHR) {
        for (i = 0; i < data.length; i++) {
            var liElement = "";
            metric = data[i];
            PresetMetricData.push(metric);

            // Toss the data into the element storage variable as well
            liElement = "<option value=" + metric.pMetricId + ">" + metric.metricSubType + "</option>";

            $presetElements += liElement;
        }

    });
    $dCTForPresetMetrics.fail(function (data, textStatus, jqXHR) {
        swal("Oh no!", data.message, "error");
    });

    var descriptionBox = $('#descriptionBox');

    $('#customUnitSwitch').change(function () {
        if ($('#customMetricTypeInput').hasClass('hidden')) {
            customMetric = 1;
            $('#pMetricSuggest').magicSuggest({
                required: false
            });
            $('#pMetricSuggest').addClass('hidden')
            $('#customMetricTypeInput').removeClass('hidden');
        } else {
            customMetric = 0;
            $('#pMetricSuggest').magicSuggest({
                required: true
            });
            $('#pMetricSuggest').removeClass('hidden')
            $('#customMetricTypeInput').addClass('hidden');
        }
    });

    $('#savingsOverviewCheck').change(function () {
        if ($('#savingsOverviewBox').hasClass('hidden')) {
            $('#savingsOverviewBox').removeClass('hidden');
        } else {
            $('#savingsOverviewBox').addClass('hidden');
        }
    })
    ;

    $('#publishCheck').change(function () {
        // http://stackoverflow.com/questions/33621053/how-to-get-the-value-of-a-bootstrap-toggle-button-in-jquery
        if ($(this).prop("checked") == true) {
            $('#publishBox').removeClass('hidden');
        } else {
            $('#publishBox').addClass('hidden');
        }
    });

    $('#descriptionCheck').change(function () {
        if (descriptionBox.hasClass('hidden')) {
            descriptionBox.removeClass('hidden');
        } else {
            descriptionBox.addClass('hidden');
        }
    })
    ;

    $('#metricsCheck').change(function () {
        if (metricsTable.hasClass('hidden')) {
            metricsTable.removeClass('hidden');
            $('#metricAmountBox').addClass('hidden');
            $('#metricTypeInputBox').addClass('hidden');
            $('#stockBox').addClass('hidden');
            $('#metricTypeInputBox').addClass('hidden');
            $('#qtyInputBox').addClass('hidden');
            $('#priceInputBox').addClass('hidden');
            $('#rrpInputBox').addClass('hidden');
            $('#statusBox').addClass('hidden');

        } else {
            metricsTable.addClass('hidden');
            $('#metricAmountBox').removeClass('hidden');
            $('#metricTypeInputBox').removeClass('hidden');
            $('#qtyInputBox').removeClass('hidden');
            $('#priceInputBox').removeClass('hidden');
            $('#rrpInputBox').removeClass('hidden');
            $('#stockBox').removeClass('hidden');
            $('#statusBox').removeClass('hidden');
        }
    })
    ;

    $('#consumableCheck').change(function () {
        if ($('#consumableContainer').hasClass('hidden')) {
            $('#consumableContainer').removeClass('hidden');
        } else {
            $('#consumableContainer').addClass('hidden');
        }
    })
    ;

    $('#specialsCheck').change(function () {
        if ($('specialsBox').hasClass('hidden')) {
            $('specialsBox').removeClass('hidden');
        } else {
            $('specialsBox').addClass('hidden');
        }
    })
    ;

    var brandInput = $('#brandInput').magicSuggest({
        required: true,
        maxSelection: 1,
        allowFreeEntries: false,
        method: 'get',
        data: 'http://localhost:5008/API/Brands',
        dataType: 'json',
        displayField: 'brandName',
        valueField: 'brandId',
        renderer: function (data) {
            return '<div style="padding: 5px;">' +
                '<div style="float: left;"><img height="75px" width="75px" src="' + data.photoUrl + '" /></div>' +
                '<div style="float: left; margin-left: 5px">' +
                    '<div style="font-weight: bold; color: #333; font-size: 15px; line-height: 11px">' + data.brandName + '</div>' +
                '</div>' +
            '</div><div style="clear:both;"></div>'; // make sure we have closed our dom stuff
        }
    });

    //var specialInput = $('#specialInput').magicSuggest({
    //    maxSelection: 1,
    //    allowFreeEntries: false,
    //    method: 'get',
    //    data: 'http://localhost:5008/API/Specials',
    //    dataType: 'json',
    //    displayField: 'brandName',
    //    valueField: 'brandId',
    //    renderer: function (data) {
    //        return '<div style="padding: 5px;">' +
    //            '<div style="float: left;"><img height="75px" width="75px" src="' + data.photoUrl + '" /></div>' +
    //            '<div style="float: left; margin-left: 5px">' +
    //                '<div style="font-weight: bold; color: #333; font-size: 15px; line-height: 11px">' + data.brandName + '</div>' +
    //                //'<div style="color: #999; font-size: 9px">' + data.email + '</div>' +
    //            '</div>' +
    //        '</div><div style="clear:both;"></div>'; // make sure we have closed our dom stuff
    //    }
    //});

    // Start of Product Image Element

    window.$productPhotoInputElement = $('#fileInput');

    var footerTemplate = '<div class="file-thumbnail-footer">\n' +
    '    <div class="file-caption-name" style="width:{width}">{caption}</div>\n' +
    '    {actions}\n' +
    '</div>';
    var actionTemplate = '<div class="file-actions">\n' +
     '       <div class="file-footer-buttons">\n {delete} </div>\n' +
     '    <div class="file-upload-indicator" tabindex="-1" title="{indicatorTitle}">{indicator}</div>\n' +
     '   <div class="radio"><input class="primaryRadioClass" id="isPrimaryRadioBox" name="isPrimaryRadioBox" type="radio" ><label for="isPrimaryRadioBox">Primary Photo</label></div>' +
     '    <div class="clearfix"></div>\n' +
     '</div>';

    $('#fileInput').fileinput({
        previewFileType: 'image',
        allowedFileTypes: ['image'],
        uploadUrl: '/API/Products/UploadProductPhotosAndSaveProductData',
        uploadAsync: false,
        maxFileCount: 5,
        layoutTemplates: { footer: footerTemplate, actions: actionTemplate },
        type: 'post',
        msgInvalidFileType: 'Invalid type for file "{name}". Only "{types}" files are supported.',
        autoReplace: true,
        overwriteInitial: false,
        showUploadedThumbs: false,
        showUpload: false,
        showRemove: false,
        browseClass: 'btn btn-primary btn-md pull-right',
        previewFileIcon: '<i class="glyphicon glyphicon-king"></i>',
        allowedFileExtensions: ['jpg', 'jpeg', 'png'],
        uploadExtraData: function () {
            var out = {}, counter = 0, key, innerSystem = 0;
            // InnerSystem System for Multi ProductPhotos
            // Even numbers identify it as a primary photo
            // Odd does the other way round
            // Learnt alot from this
            // And from Mr Tan's way of identifying the value for his fileinput
            // http://plugins.krajee.com/file-input-ajax-demo/7

            //in the array pack the value you want for the very exact parameter name you have in the UploadAsync method/function
            //if UploadAsync(string mytext) then out['mytext']=THE_VALUE;
            $('.primaryRadioClass').each(function () {
                $el = $(this);

                key = $el ? 'new_' + counter : 'init_' + counter;
                if (($el[0].checked) = true) {
                    out[key] = innerSystem; // Even is yes
                } else {
                    out[key] = innerSystem + 1; // odd is no
                }

                innerSystem = innerSystem + 2;
                counter++;
            });
            return out;
        }
    });
    $('#fileInput').on('filepreupload', function (event, data, previewId, index) {
        var form = data.form, files = data.files, extra = data.uploadExtraData,
            response = data.response, reader = data.reader;
    });
    $('#fileInput').on('filebatchpreupload', function (event, data, jqXHR) {
        var form = data.form, files = data.files, extra = data.uploadExtraData,
            response = data.response, reader = data.reader;
    });
    window.$productPhotoInputElement.on('filebatchuploadsuccess',
                         function (event, data, previewId, index) {
                             var form = data.form, files = data.files, extra = data.extra,
                                 response = data.response, reader = data.reader;
                             swal("Hurray!", data.responseJSON.message, "Success");
                         });

    // End of Product Image Element

    // Initialize selectpicker
    $('.selectpicker').selectpicker({
        style: 'btn-info',
        size: 3
    });

    // onClicks for Metrics Table
    $(document).ready(function () {

        // Custom Metric Row
        $("#customRowBtn").click(function () {
            $("#metricsTableBody").append(
                '<tr value="0" valign="top">' +
                '<td name="metricAmountField">' +
                '<input type="text" class="form-control font-bold" id="metricAmount" name="metricAmount" value="" placeholder="Metric Amount" />' +
                '</td>' +
                '<td name="metricTypeField">' +
                '<input type="text" class="form-control font-bold" id="metricTypeInput" name="metricTypeInput" value="" placeholder="Metric Type" />' +
                '</td>' +
                '<td>' +
                '<input type="number" min="0" pattern="[0-9]" class="form-control font-bold" id="qtyInput" name="qtyInput" value="" placeholder="Quantity" />' +
                '</td>' +
                '<td>' +
                '<select class="form-control selectpicker" id="statusInput" name="statusInput">' +
                $statusElements +
                '</select>' +
                '</td>' +
                '<td>' +
                '<input type="number" class="form-control font-bold" id="pptInput" name="pptInput" value="" placeholder="Price"  pattern="^[0-9]{1,19}\.[0-9]{1,4}$|^[0-9]{1,19}$" />' +
                '</td>' +
                '<td>' +
                '<input type="number" class="form-control font-bold" id="rrpInput" name="rrpInput" value="" placeholder="RRP"  pattern="^[0-9]{1,19}\.[0-9]{1,4}$|^[0-9]{1,19}$" />' +
                '</br><a href="javascript:void(0);" class="remRow btn btn-danger inline">Remove</a>' +
                '</td>' +
                '</tr>'
                );

            $('.selectpicker').selectpicker('refresh');
        });

        // Preset Metric Row
        $("#rowBtn").click(function () {
            $("#metricsTableBody").append(
                '<tr value="1" valign="top">' +
                // Store a value in the first column to show whether
                // if it's preset or custom.
                '<td name="metricAmountField">' +
                '<input type="text" class="form-control font-bold" id="metricAmount" name="metricAmount" value="" placeholder="Metric Amount" />' +
                '</td>' +
                '<td name="metricTypeField">' +
                '<select class="form-control selectpicker" id="metricTypeInput" name="metricTypeInput" data-live-search="true">' +
                $presetElements +
                '</select>' +
                '</td>' +
                '<td>' +
                '<input type="number" min="0" pattern="[0-9]" class="form-control font-bold" id="qtyInput" name="qtyInput" value="" placeholder="Stock" />' +
                '</td>' +
                '<td>' +
                '<select class="form-control selectpicker" id="statusInput" name="statusInput">' +
                $statusElements +
                '</select>' +
                '</td>' +
                '<td>' +
                '<input type="number" class="form-control font-bold" id="pptInput" name="pptInput" value="" placeholder="Price" pattern="^[0-9]{1,19}\.[0-9]{1,4}$|^[0-9]{1,19}$" />' +
                '</td>' +
                '<td>' +
                '<input type="text" class="form-control font-bold" id="rrpInput" name="rrpInput" value="" placeholder="RRP" pattern="^[0-9]{1,19}\.[0-9]{1,4}$|^[0-9]{1,19}$" />' +
                '</br><a href="javascript:void(0);" class="remRow btn btn-danger inline">Remove</a>' +
                '</td>' +
                '</tr>');

            $('.selectpicker').selectpicker('refresh');
        });

        $("#metricsTableBody").on('click', '.remRow', function () {
            // This = Button
            // Parent = Column
            // Parent = Row
            // lol
            $(this).parent().parent().remove();
        });
    });

    // Best way to force these codes here to wait for the other things
    // outside of it to load first before running
    // http://stackoverflow.com/questions/544993/official-way-to-ask-jquery-wait-for-all-images-to-load-before-executing-somethin
    $(window).on("load", function () {

        //------------------------------------ Client-side Load Data logic -----------------------------------
        var g_prodId = getBrandIdFromAddressBar();
        function getBrandIdFromAddressBar() {
            //Get employee id from the url string in the browser's address bar
            var urlArray = window.location.href.split('/');
            var id = urlArray[urlArray.length - 1];
            return id;
        };

        /**
         * Metric Dataloader for Products Update View
         *  By Nicholas
        **/
        $loadMetricsDataHandler = jQuery.ajax({
            contentType: 'application/json',
            method: 'get',
            url: 'http://localhost:5008/API/Metrics/' + g_prodId,
        })
        $loadMetricsDataHandler.done(function (data, textStatus, jqXHR) {
            // We'll have to check if there is 1 or more Metrics
            if (data.length == 1) {
                console.dir(data[0]);
                $('#metricAmountInput').val(data[0].metricAmount); // Metric Amount

                if (data[0].presetMetric != null) {
                    pMetricSuggest.setSelection(data[0].presetMetric); // Preset Metric Type (eg. Pounds)
                } else {

                }

            } else {


            }

        } //end of JavaScript anonymous function

              )//end of the done() method;
        $loadMetricsDataHandler.fail(function (data, textStatus, jqXHR) {
            swal("Oh no!", data.response.message, "error");
        })//end of $loadBrandDataHandler.fail()

        // Product Dataloader
        //Note: jQuery.ajax(..) is also often written is $.ajax(..)
        $loadProductHandler = jQuery.ajax({
            type: 'GET',
            url: '/API/Products/' + g_prodId,
        })
        $loadProductHandler.done(function (data, textStatus, jqXHR) {
            console.dir(data);
            // Load the variables that will always be needed
            $('#prodNameInput').val(data.prodName);
            brandInput.setSelection(data.brand);
            // Selected Categories are now loaded from a seperate API
            //msCategoryList.setSelection(data.productCategory.catId);
            $('#tiqInput').val(data.thresholdInventoryQuantity);

            // Let's set the product isPublished as well
            if (data.published != "0") {
                $('#publishCheck').bootstrapToggle('on');
                $('#publishBox').removeClass('hidden');
            }

            // Description
            if (data.description != null && data.description != "") {
                $('#descriptionCheck').bootstrapToggle('on');
                $('#descriptionBox').removeClass('hidden');
                tinyMCE.get('descriptionEditor').setContent(data.description);
            }

            // Savings Overview
            if (data.savingsOverview != "" && data.savingsOverview != null) {
                // Since there's something, we'll put it into the tinyMCE box and enable the toggle
                $('#savingsOverviewCheck').bootstrapToggle('on');
                $('#savingsOverviewBox').removeClass('hidden');
                tinyMCE.get('savingsOverviewEditor').setContent(data.savingsOverview);
            }

            // Is a Consumable
            if (data.isConsumable != "0") {
                $('#consumableCheck').bootstrapToggle('on');
                $('#consumableContainer').removeClass('hidden');

                // If statements for each attribute

                // Typical Analysis
                if (data.consumable.typicalAnalysis != null && data.consumable.typicalAnalysis != "") {
                    tinyMCE.get('typicalAnalysisBox').setContent(data.consumable.typicalAnalysis);
                }

                // Guranteed Analysis
                if (data.consumable.guranteedAnalysis != null && data.consumable.guranteedAnalysis != "") {
                    tinyMCE.get('guranteedAnalysisBox').setContent(data.consumable.guranteedAnalysis);

                }

                // Ingredients
                if (data.consumable.ingredients != null && data.consumable.ingredients != "") {
                    tinyMCE.get('ingredientsBox').setContent(data.consumable.ingredients);
                }

                // Active Ingredients
                if (data.consumable.activeIngredients != null && data.consumable.activeIngredients != "") {
                    tinyMCE.get('activeIngredientsBox').setContent(data.consumable.activeIngredients);
                }

                // In-Active Ingredients
                if (data.consumable.inActiveIngredients != null && data.consumable.inActiveIngredients != "") {
                    tinyMCE.get('inActiveIngredientsBox').setContent(data.consumable.inActiveIngredients);
                }
            } // End of Is a consumable



        }//end of JavaScript anonymous function

        )//end of the done() method;

        /**
         * ProductCategory Loader
         */
        //Note: jQuery.ajax(..) is also often written is $.ajax(..)
        $loadProductCategoryHandler = jQuery.ajax({
            type: 'GET',
            url: '/API/ProductCategory/' + g_prodId,
        })
        $loadProductCategoryHandler.done(function (data, textStatus, jqXHR) {
            msCategoryList.setSelection(data);
        }//end of JavaScript anonymous function

        )//end of the done() method;

        //------------------------------------ Client-side Load Data logic ---(End)---------------------------

    });

    // Function Constructor for creating a consumable object
    function Consumable(inTypicalAnalysis, inGuranteedAnalysis, inIngredients, inActiveIngredients, inInActiveIngredients) {
        this.TypicalAnalysis = inTypicalAnalysis;
        this.GuranteedAnalysis = inGuranteedAnalysis;
        this.Ingredients = inIngredients;
        this.ActiveIngredients = inActiveIngredients;
        this.InActiveIngredients = inInActiveIngredients;
    }

    // Function Constructor for creating a metrics object
    function Metric(inMetricAmount, inMetricType, inQuantity, inPrice, inRRP, inStatus, inIsPreset) {
        this.MetricAmount = inMetricAmount;
        this.MetricType = inMetricType;
        this.Quantity = inQuantity;
        this.Price = inPrice;
        this.RRP = inRRP;
        this.Status = inStatus;
        this.isPreset = inIsPreset;
    }

    //Using a function technique to create a JavaScript class, WebFormData
    // Special promotions & Consumable Entities unscripted
    // Things that are commented out will permanently be with the Metric Constructor
    function WebFormData(inProdName, inTiQ, inCategories, inBrandId, inPublished, inSavingsOverview, inDescription, inMetrics, inConsumable, inStatusId) {
        this.ProdName = inProdName;
        this.ThresholdInventoryQuantity = inTiQ;
        this.Categories = inCategories;
        this.BrandId = inBrandId;
        this.Published = inPublished;
        this.SavingsOverview = inSavingsOverview;
        this.Description = inDescription;
        this.Metrics = inMetrics;
        this.Consumable = inConsumable;
        // Incase the product has only one metric
        this.StatusId = inStatusId;
    }

    // function to unhide the errorbox
    function errorBoxUnhide() {
        if ($('#errorBox').hasClass('hidden')) {
            $('#errorBox').removeClass('hidden');
            $('html,body').animate({ scrollTop: 0 }, 'slow');
            //location.href = "#infoBox"; // Send the user back to the top
            // LET HIM SEE WHAT HE HAS DONE
        }
    }

    // function to hide the errorbox
    // Also clear up the box contents to make sure the errors don't repeat
    // from a probable recurring submission
    function errorBoxHide() {
        if (!$('#errorBox').hasClass('hidden')) {
            $('#errorBox').addClass('hidden');
            // Just to double confirm what I am doing is right
            // http://stackoverflow.com/questions/22593759/how-do-i-clear-inner-html
            document.getElementById("errorBoxText").innerHTML = "";
        }
    }

    $('#saveButton').on('click', function () {
        // Hide errorBox upon submission
        errorBoxHide();

        // RegEx for Decimal(19, 4), global standards for currency datatype
        // http://www.w3schools.com/jsref/jsref_regexp_test.asp
        var patt = new RegExp("^[0-9]{1,19}\.[0-9]{1,4}$|^[0-9]{1,19}$");

        // Everyone needs MetricData
        var MetricData = [];

        // Product Name
        var collectedProdName = json_quote($('#prodNameInput').val());
        if (collectedProdName == null || collectedProdName == "") {
            document.getElementById("errorBoxText").innerHTML += "<strong> Please enter a product name! </strong><br />";
            errorBoxUnhide();
        }

        // Brand id
        var collectedBrandId = brandInput.getValue().toString(); // Brand Id
        if (collectedBrandId == null || collectedBrandId == "") {
            document.getElementById("errorBoxText").innerHTML += "<strong> Please select a brand! </strong><br />";
            errorBoxUnhide();
        }

        // Categories
        var collectedCategories = JSON.stringify(msCategoryList.getValue());

        // Threshold Inventory Quantity
        var collectedTIQ = $('#tiqInput').val();
        if (collectedTIQ == null || collectedTIQ == "") {
            document.getElementById("errorBoxText").innerHTML += "<strong> Please enter an input for Threshold Inventory Quantity! </strong><br />";
            errorBoxUnhide();
        }

        // Savings Overview
        var collectedSavingsOverview; // Define a variable to store the description
        if ($('#savingsOverviewBox').hasClass('hidden')) {
            collectedSavingsOverview = null
        } else {
            collectedSavingsOverview = json_quote(tinyMCE.get('savingsOverviewBox').getContent());
            console.dir(collectedSavingsOverview);
        }

        // Description
        var collectedDescription; // Define a variable to store the description
        if ($('#descriptionBox').hasClass('hidden')) {
            collectedDescription = null
        } else {
            collectedDescription = json_quote(tinyMCE.get('descriptionBox').getContent());
        }

        // Static variables
        var collectedPublished;
        if ($('#publishCheck').is('checked')) { // if the product is set to be published
            // Setup the identifying variable
            collectedPublished = "1";
        } else {
            collectedPublished = "0";
        }

        if (!$('#consumableContainer').hasClass('hidden')) { // if the product is a consumable
            // Iterate through those boxes and take their stuff to make a consumable object
            //Consumable(inTypicalAnalysis, inGuranteedAnalysis, inIngredients, inActiveIngredients, inInActiveIngredients)
            var collectedTypicalAnalysis = json_quote(tinyMCE.get('TypicalAnalysisBox').getContent());
            var collectedGuranteedAnalysis = json_quote(tinyMCE.get('GuranteedAnalysisBox').getContent());
            var collectedIngredients = json_quote(tinyMCE.get('IngredientsBox').getContent());
            var collectedActiveIngredients = json_quote(tinyMCE.get('ActiveIngredientsBox').getContent());
            var collectedInActiveIngredients = json_quote(tinyMCE.get('InActiveIngredientsBox').getContent());

            var collectedConsumable = new Consumable(collectedTypicalAnalysis, collectedGuranteedAnalysis, collectedIngredients, collectedActiveIngredients, collectedInActiveIngredients);
        } else {
            var collectedConsumable = null;
        }

        // If there are no custom sizes or variations
        if ($('#metricSegment').hasClass('hidden')) {
            // Metric Amount Input & Validation
            var collectedMetricAmount = $('#metricAmountInput').val();
            if (collectedMetricAmount == null || collectedMetricAmount == "") {
                document.getElementById("errorBoxText").innerHTML += "<strong> Please enter a metric amount for your metric type! </strong><br />";
                errorBoxUnhide();
            }

            // Metric Type Input & Validation
            if (customMetric == 1) {
                var collectedMetricType = json_quote($('#customMetricTypeInput').val());
                var collectedIsPreset = 0;
                if (collectedMetricType == null || collectedMetricType == "") {
                    document.getElementById("errorBoxText").innerHTML += "<strong> Please enter your custom metric type! </strong><br />";
                    errorBoxUnhide();
                }
            } else {
                if ($('#pMetricSuggest').magicSuggest().isValid() == true) {
                    var collectedIsPreset = 1;
                    var collectedMetricType = $('#pMetricSuggest').magicSuggest().getValue().toString();
                } else {
                    document.getElementById("errorBoxText").innerHTML += "<strong> Please choose a Preset Metric! </strong><br />";
                    errorBoxUnhide();
                }
            }

            // Status
            if ($('#statusSuggest').magicSuggest().isValid()) {
                var collectedStatusId = $('#statusSuggest').magicSuggest().getValue().toString();
            } else {
                document.getElementById("errorBoxText").innerHTML += "<strong> Please select a status! </strong><br />";
                errorBoxUnhide();
            }

            // We have to make sure that the user won't be able to input any spamming dots
            // into either TIQ's input or the quantity input

            var collectedQuantity = $('#qtyInput').val();

            var collectedPrice;

            // If the price input is not valid,
            if (!patt.test($('#priceInput').val())) {
                document.getElementById("errorBoxText").innerHTML += "<strong> Please enter a valid price! (Maximum of 4 Decimal Places.) </strong><br />";
                errorBoxUnhide();
            }
            // Else we'll carry on with the price
            collectedPrice = $('#priceInput').val();

            var collectedRRP;
            // If the Recommended Retail Price input is not valid,
            if (!patt.test($('#rrpInput').val())) {
                document.getElementById("errorBoxText").innerHTML += "<strong> Please enter a valid recommended retail price! (Maximum of 4 Decimal Places.) </strong><br />";
                errorBoxUnhide();
            }
            // Else we'll carry on with the RRP
            collectedRRP = $('#rrpInput').val();

            // Push the single metric into the array of metrics
            // (inMetricAmount, inMetricType, inQuantity, inPrice, inRRP, inStatus)
            MetricData.push(new Metric(collectedMetricAmount, collectedMetricType, collectedQuantity, collectedPrice, collectedRRP, collectedStatusId, collectedIsPreset))

            // DONE

            // Create a product containing only one metric

            // Create the object for POST
            //(inProdName, inTiQ, inBrandId, inPublished, inDescription, inMetrics, inIsConsumable, inStatusId)
            var webFormData = new WebFormData(collectedProdName, collectedTIQ, collectedCategories, collectedBrandId, collectedPublished,
                collectedSavingsOverview, collectedDescription, MetricData, collectedConsumable, collectedStatusId);

        } else {
            // If there are custom variations, we'll have to utitilize the Metrics system
            // Look for the table
            var table = document.getElementById("metricsTableBody");

            // If the user didn't try entering any metric for the product
            if (table.rows < 1) {
                document.getElementById("errorBoxText").innerHTML += "<h5><strong> Hey, you did not enter any metric for your product! (Maximum of 4 Decimal Places.) </strong></h5><br />";
                errorBoxUnhide();
            }

            // For each row in metricsTableBody javascript style
            for (var i = 0, row; row = table.rows[i]; i++) {
                // iterate through rows

                // Define the attributes of each Metric
                var MetricAmount = '';
                var MetricType = '';
                var Quantity = '';
                var Price = '';
                var RRP = '';
                var Status = '';

                for (var j = 0, col; col = row.cells[j]; j++) {
                    // Define a variable for validation
                    var isValid = 1;

                    switch (j) {
                        case 0: // Metric Amount
                            MetricAmount = row.cells[j].children[0].value;
                            if (MetricAmount == null || MetricAmount == "") {
                                isValid = 0;
                            }
                            break;
                        case 1: // Metric Type
                            // Dropdown box
                            // If this element is not selectpicker
                            if (row.cells[j].children[0].classList[1].toString() == "font-bold") {
                                var isPreset = "0"; // 0 = false
                                MetricType = row.cells[j].children[0].value;
                                if (MetricType == null || MetricType == "") {
                                    isValid = 0;
                                }
                                break;
                            } else {
                                var isPreset = "1"; // 1 = true
                                MetricType = row.cells[j].children[0].innerText.trim();
                                if (MetricType == null || MetricType == "") {
                                    isValid = 0;
                                }
                                break;
                            }
                            break;
                        case 2: // Quantity
                            Quantity = row.cells[j].children[0].value;
                            if (Quantity == null || Quantity == "") {
                                isValid = 0;
                            }
                            break;
                        case 3: // Status
                            Status = row.cells[j].children[0].innerText.trim();
                            if (Status == null || Status == "") {
                                isValid = 0;
                            }
                            break;
                        case 4: // Price per type
                            Price = row.cells[j].children[0].value;
                            if (Price == null || Price == "") {
                                isValid = 0;
                            }
                            break;
                        case 5:
                            RRP = row.cells[j].children[0].value;
                            if (RRP == null || RRP == "") {
                                isValid = 0;
                            }
                            break;
                        default:
                            isValid = 0;
                    }

                    // Set the error here
                    if (isValid = 0) {
                        document.getElementById("errorBoxText").innerHTML += "<strong> You missed out something at row " + j + " of the metrics table! </strong><br />";
                        errorBoxUnhide();
                    }
                }
                // Finally we push the metric object to the MetricData
                MetricData.push(new Metric(MetricAmount, json_quote(MetricType), Quantity, Price, RRP, Status, isPreset));
            }
            // Constructing the webformdata object for a product with alot of metric units

            // Create the object for POST
            //(inProdName, inTiQ, inBrandId, inPublished, inDescription, inMetrics, inIsConsumable, inStatusId)
            var webFormData = new WebFormData(collectedProdName, collectedTIQ, collectedCategories, collectedBrandId, collectedPublished,
                collectedSavingsOverview, collectedDescription, MetricData, collectedConsumable, "0");

        }

        // Before we stringify webFormData, toss out if the erroBox is exposed
        if (!($('#errorBox').hasClass('hidden'))) {
            // Toss a return and that's it
            return;
        }

        //Serialize the webFormData object which contains the type name
        //data into a flat string. So that, it can be sent accross the Internet network successfully.
        var webFormDataInString = JSON.stringify(webFormData);

        $saveProductHandler = jQuery.ajax({
            method: 'post',
            contentType: 'application/json',
            url: '/Api/Products/SaveNewProductInformationInSession',
            data: "'" + webFormDataInString + "'"
        });
        $saveProductHandler.done(function (data, textStatus, jqXHR) {
            // If no images are uploaded, we'll post with a stock image
            if ($('#fileInput').get(0).files.length == 0) {
                $saveProductDBHandler = jQuery.ajax({
                    method: 'post',
                    contentType: 'application/json',
                    url: '/Api/Products/SaveProductData',
                    data: "'" + webFormDataInString + "'"
                });
                $saveProductDBHandler.done(function (data, textStatus, jqXHR) {
                    swal("Hurray!", data.message, "success");
                    return;
                });
                $saveProductDBHandler.fail(function (data, textStatus, jqXHR) {
                    swal("Oh no!", data.responseJSON.message, "error");
                });
            } else {
                window.$productPhotoInputElement.fileinput('upload');
            }
        });
        $saveProductHandler.fail(function (data, textStatus, jqXHR) {
            swal("Oh no!", data.responseJSON.message, "error");
        });
    });//end of $('#saveButton').on('click', function () {

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    meta = { // table of character substitutions
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"': '\\"',
        '\\': '\\\\'
    };

    // Escape Characters Converter
    // Source:http://bernhardhaeussner.de/odd/json-escape/#desc
    function json_quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c :
                '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '' : '' + string + '';
    }
</script>
