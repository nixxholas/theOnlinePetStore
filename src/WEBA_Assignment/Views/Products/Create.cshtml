<div class="row">
    <div class="col-md-12">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <div class="panel-title">Create Product Record</div>
            </div>
            <div class="panel-body">
                <form id="dataForm" role="form" class="form-horizontal">
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-3" for="prodNameInput">Product Name</label>
                        <div class="form-group col-md-8">
                            <input type="text" name="prodNameInput" id="prodNameInput" class="form-control font-bold"
                                   maxlength="50" placeholder="Product Name" value="" />
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-3 photoUploadMarginFixProducts" for="brandInput">Brand</label>
                        <div class="col-md-5">
                            <div id="brandInput" class="form-group">

                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-3 photoUploadMarginFixProducts" for="fileInput">Photo</label>
                        <div class="col-md-8">
                            <input id="fileInput" name="fileInput" type="file" class="file input-group-lg" multiple />
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-3" for="productProperties">Properties</label>
                        <div id="checkboxContainer" class="col-md-9">
                            <div class="ui slider checkbox">
                                <input type="checkbox" id="descriptionCheck">
                                <label>Product has a description</label>
                            </div><br>
                            <div class="ui slider checkbox">
                                <!-- A Product does not need to comply with the metrics system.
                                In such cases, we'll be creating a row within metrics without
                                any properties and just throw in it's price into the row. -->
                                <input type="checkbox" id="metricsCheck">
                                <label>Product has many variations</label>
                            </div><br>
                            <div class="ui slider checkbox">
                                <input type="checkbox" id="consumableCheck">
                                <label>Product is a consumable</label>
                            </div><br>
                            <div class="ui slider checkbox">
                                <input type="checkbox" id="specialsCheck">
                                <label>Product has a special promotion</label>
                            </div><br>
                        </div>
                    </div>
                    <div class="form-group col-md-12 hidden" id="descriptionBox">
                        <label class="control-label col-md-3" for="descBox">Description</label>
                        <div class="form-group col-md-8">
                            <textarea id="descriptionBox"></textarea>
                        </div>
                    </div>
                    <div class="form-group col-md-12 hidden" id="metricSegment">
                        <label class="control-label col-md-3" for="dataTable">Metrics</label>
                        <div class="col-md-8">
                            <table id="dataTable" class="table table-hover">
                                <button id="rowBtn" onclick="addRow()" class="pull-right large ui secondary button">
                                    New Row
                                </button>
                                <thead>
                                    <tr>
                                        <th>Metrics Name</th>
                                        <th>Metric Type</th>
                                        <th>Quantity</th>
                                        <th>Price per type</th>
                                        <th>RRP</th> <!-- Recommended Retail Price -->
                                        <th>&nbsp;</th>
                                    </tr>
                                </thead>
                                <tbody id="metricsTableBody"></tbody>
                            </table>
                        </div>
                    </div>

                    <div class="form-group col-md-12 hidden" id="specialsBox">
                        <label class="control-label col-md-3 photoUploadMarginFixProducts" for="specialInput">Specials</label>
                        <div class="col-md-5">
                            <div id="specialInput" class="form-group">

                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-1"></label>
                        <div class="col-md-10">
                            <div class="pull-right">
                                <input type="button" class="btn btn-primary" value="Save" id="saveButton" />
                                <a class="btn btn-default" asp-action="Index" asp-controler="Products">Cancel</a>
                            </div>
                        </div>
                    </div>
            </div>
            </form>
        </div><!-- end of div element which has the class="panel-body" -->
    </div><!-- end of the div element which has the class="panel" -->
</div><!-- end of the div element which as the  class="col-md-offset-2 col-sm-8"-->
</div><!-- end of div element with class="row" -->

<script>
    var isConsumable = 0;
    var PresetMetricData = [];
    
    // PresetMetric GET Method
    var $dataCommunicationTracker = jQuery.ajax({
        contentType: 'application/json',
        method: 'get',
        url: 'http://localhost:5008/API/PresetMetrics',
    });
    $dataCommunicationTracker.done(function (data, textStatus, jqXHR) {
        for (i = 0; i < data.length; i++) {
            metric = data[i];
            PresetMetricData.push(metric);
        }
    });
    $dataCommunicationTracker.fail(function (data, textStatus, jqXHR) {
        swal("Oh no!", data.responseJSON.message, "error");
    });

    var descriptionBox = $('#descriptionBox');
    tinymce.init({
        selector: 'textarea',
        height: 250,
        theme: 'modern',
        plugins: [
          'advlist autolink lists link image charmap print preview hr anchor pagebreak',
          'searchreplace wordcount visualblocks visualchars code fullscreen',
          'insertdatetime media nonbreaking save table contextmenu directionality',
          'emoticons template paste textcolor colorpicker textpattern imagetools'
        ],
        toolbar1: 'insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
        toolbar2: 'print preview media | forecolor backcolor emoticons',
        image_advtab: true,
        content_css: [
          '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
          '//www.tinymce.com/css/codepen.min.css'
        ]
    });
    var metricsTable = $('#metricSegment');

    function addRow() {
        // We'll have to add a new row in the table
        var $tableElement = null;
        var $cellElement = null;
        var $rowElement = null;
        var works = "nice";

        //-------- Find the table element -----------
        //I am using the $tableElement variable
        //to represent the found HTML element which has a matching id of brandTableBody
        $tableBodyElement = $('#metricsTableBody');

        //Create the 1st cell element which displays the CategoryId
        $cellElement = $('<td></td>', { text: works });
        $rowElement.append($cellElement);
        //Create the 2nd cell element which displays the Category Name
        $cellElement = $('<td></td>', { text: works });
        $rowElement.append($cellElement);
        // Create the 3rd cell element which displays the Visibility
        $cellElement = $('<td></td>', { text: works });
        $rowElement.append($cellElement);
        //Create the 4th cell element which display created at information
        $cellElement = $('<td></td>', { text: works });
        $rowElement.append($cellElement);
        //Create the 5th cell element which display created at information
        $cellElement = $('<td></td>', { text: works });
        $rowElement.append($cellElement);
        //Create the 6th cell element which display updated at information
        $cellElement = $('<td></td>', { text: works });
        $rowElement.append($cellElement);
        //Create the 7th cell element which display created at information
        $cellElement = $('<td></td>', { text: works });
        $rowElement.append($cellElement);
        if (deletedAt == null) {
            //---------------- Using jQuery() to create the hyperlink element using the <a></a> --------
            $hyperLinkElement = $('<a>Update</a>').attr('href', '/Categories/Update/' + CatId);
            $hyperLinkElement.addClass('btn btn-primary');
            //---------------- Using jQuery() to create the hyperlink element using the <a></a> --------
            $hyperLinkElement2 = $('<a>Manage Brands</a>').attr('href', '/Brands/BrandsUnderCategory/' + CatId); // Placeholder
            $hyperLinkElement2.addClass('btn btn-primary inline');
            //-----------------Using jQuery() to creating the 6th cell for the row----------------------
            $cellElement = $('<td></td>');
            //-----------------Add the previous created hyperlink element, $hyperLinkElement
            //                 into the newly created 6th cell.
            $cellElement.append($hyperLinkElement);
            $cellElement.append($hyperLinkElement2);
        } else {
            //---------------- Using jQuery() to create the hyperlink element using the <a></a> --------
            $hyperLinkElement3 = $('<a name="restore" id=' + CatId + ' onClick="restoreCat(' + CatId + ')">Restore Category</a>'); // Placeholder
            $hyperLinkElement3.addClass('btn btn-primary inline');
            $cellElement = $('<td></td>');
            $cellElement.append($hyperLinkElement3);
        }
        //---------------Add the 6th cell into the row represented by the $rowElement
        $rowElement.append($cellElement);
        //Insert the $rowElement into the table element represented by $tableElement.
        $tableBodyElement.append($rowElement);
    };

    $('#descriptionCheck').on('click', function () {
        if (descriptionBox.hasClass('hidden')) {
            descriptionBox.removeClass('hidden');
        } else {
            descriptionBox.addClass('hidden');
        }
    })
    ;

    $('#metricsCheck').on('click', function () {
        if (metricsTable.hasClass('hidden')) {
            metricsTable.removeClass('hidden');
        } else {
            metricsTable.addClass('hidden');
        }
    })
    ;

    $('#consumableCheck').on('click', function () {
        if (isConsumable = 0) {
            isConsumable = 1;
        } else {
            isConsumable = 0;
        }
    })
    ;

    $('#specialsCheck').on('click', function () {
        if (specialsBox.hasClass('hidden')) {
            specialsBox.removeClass('hidden');
        } else {
            specialsBox.addClass('hidden');
        }
    })
    ;

    // note that it would be a lot more proper to use CSS classes here instead of inline style

    var brandInput = $('#brandInput').magicSuggest({
        maxSelection: 1,
        allowFreeEntries: false,
        method: 'get',
        data: 'http://localhost:5008/API/Brands',
        dataType: 'json',
        displayField: 'brandName',
        valueField: 'brandId',
        renderer: function (data) {
            return '<div style="padding: 5px;">' +
                '<div style="float: left;"><img height="75px" width="75px" src="' + data.photoUrl + '" /></div>' +
                '<div style="float: left; margin-left: 5px">' +
                    '<div style="font-weight: bold; color: #333; font-size: 15px; line-height: 11px">' + data.brandName + '</div>' +
                    //'<div style="color: #999; font-size: 9px">' + data.email + '</div>' +
                '</div>' +
            '</div><div style="clear:both;"></div>'; // make sure we have closed our dom stuff
        }
    });

    //var specialInput = $('#specialInput').magicSuggest({
    //    maxSelection: 1,
    //    allowFreeEntries: false,
    //    method: 'get',
    //    data: 'http://localhost:5008/API/',
    //    dataType: 'json',
    //    displayField: 'brandName',
    //    valueField: 'brandId',
    //    renderer: function (data) {
    //        return '<div style="padding: 5px;">' +
    //            '<div style="float: left;"><img height="75px" width="75px" src="' + data.photoUrl + '" /></div>' +
    //            '<div style="float: left; margin-left: 5px">' +
    //                '<div style="font-weight: bold; color: #333; font-size: 15px; line-height: 11px">' + data.brandName + '</div>' +
    //                //'<div style="color: #999; font-size: 9px">' + data.email + '</div>' +
    //            '</div>' +
    //        '</div><div style="clear:both;"></div>'; // make sure we have closed our dom stuff
    //    }
    //});
    
    // Start of Product Image Element

    window.$brandPhotoInputElement = $('#fileInput');

    var footerTemplate = '<div class="file-thumbnail-footer">\n' +
    '    <div class="file-caption-name" style="width:{width}">{caption}</div>\n' +
    '    {actions}\n' +
    '</div>';
    var actionTemplate = '<div class="file-actions">\n' +
     '       <div class="file-footer-buttons">\n {delete} </div>\n' +
     '    <div class="file-upload-indicator" tabindex="-1" title="{indicatorTitle}">{indicator}</div>\n' +
     '    <div class="clearfix"></div>\n' +
     '</div>';

    $('#fileInput').fileinput({
        previewFileType: 'image',
        allowedFileTypes: ['image'],
        uploadUrl: '/API/Brands/UploadProductPhotosAndUpdateProductData',
        uploadAsync: false,
        maxFileCount: 3,
        layoutTemplates: { footer: footerTemplate, actions: actionTemplate },
        type: 'post',
        msgInvalidFileType: 'Invalid type for file "{name}". Only "{types}" files are supported.',
        autoReplace: true,
        overwriteInitial: false,
        showUploadedThumbs: false,
        showUpload: false,
        showRemove: false,
        browseClass: 'btn btn-primary btn-md pull-right',
        previewFileIcon: '<i class="glyphicon glyphicon-king"></i>',
        allowedFileExtensions: ['jpg', 'jpeg', 'png'],
        uploadExtraData: function () {  // callback example
            var out = {};
            return out;
        }
    });
    window.$brandPhotoInputElement.on('filebatchuploadsuccess',
                         function (event, data, previewId, index) {
                             var form = data.form, files = data.files, extra = data.extra,
                                 response = data.response, reader = data.reader;
                             swal("Hurray!", data.responseJSON.message, "Success");
                         });

    // End of Product Image Element

    //Using a function technique to create a JavaScript class, WebFormData
    function WebFormData(inProdName, inBrandId, inDescription, inMetrics, inTiQ, inPublished, inIsConsumable) {
        this.ProdName = inProdName;
        this.BrandId = inBrandId;
        this.Description = inDescription;
        this.Metrics = inMetrics;
        this.ThresholdInventoryQuantity = inTiQ;
        this.Published = inPublished;
        this.isConsumable = inIsConsumable;
    }

    // Form validation for jQuery-based elements
    $('#dataForm').validate({
        rules: {
            prodNameInput: {
                minlength: 2,
                required: true
            }
        },
        highlight: function (element) {
            $(element).closest('.control-group')
                //.removeClass('success')
                .addClass('error');
        },
        success: function (element) {
            element//.text('').addClass('valid')
                .closest('.control-group')
                .removeClass('error');
            //.addClass('success');
        }
    });

    $('#saveButton').on('click', function () {
        var collectedProdName = $('#prodNameInput').val();
        var collectedBrand = brandInput.getValue(); // Brand Id in an array
        //if (collectedProdName == null || collectedProdName == "") {
        //    swal("Error!", "Please enter an appropriate product name!", "error")
        //    return; // Break out of the function
        //}


        //(inProdName, inBrandId, inDescription, inMetrics, inTiQ, inPublished, inIsConsumable)
        var webFormData = new WebFormData(collectedProdName, collectedVisibilityId, collectedStartDate, collectedEndDate);

        //Serialize the webFormData object which contains the type name
        //data into a flat string. So that, it can be sent accross the Internet network successfully.
        var webFormDataInString = JSON.stringify(webFormData);

        $saveProductHandler = jQuery.ajax({
            method: 'post',
            contentType: 'application/json',
            url: '/Api/Products/SaveNewProductInformationInSession',
            data: "'" + webFormDataInString + "'"
        });
        $saveProductHandler.done(function (data, textStatus, jqXHR) {
            // If no images are uploaded, we'll post with a stock image
            if ($('#fileInput').get(0).files.length == 0) {
                $saveProductDBHandler = jQuery.ajax({
                    method: 'post',
                    contentType: 'application/json',
                    url: '/Api/Brands/SaveBrandData',
                    data: "'" + webFormDataInString + "'"
                });
                $saveProductDBHandler.done(function (data, textStatus, jqXHR) {
                    swal("Hurray!", data.responseJSON.message, "Success");
                });
                $saveProductDBHandler.fail(function (data, textStatus, jqXHR) {
                    swal("Oh no!", data.responseJSON.message, "error");
                });
            } else {
                window.$brandPhotoInputElement.fileinput('upload');
            }
        });
        $saveProductHandler.fail(function (data, textStatus, jqXHR) {
            swal("Oh no!", data.responseJSON.message, "error");
        });
    });//end of $('#saveButton').on('click', function () {

</script>
