<div class="row">
    <div class="col-md-12">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <div class="panel-title">Create Product Record</div>
            </div>
            <div class="panel-body">
                <form id="dataForm" data-toggle="validator" role="form" class="form-horizontal">
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-2" for="prodNameInput">Product Name</label>
                        <div class="form-group col-md-9">
                            <input type="text" name="prodNameInput" id="prodNameInput" class="form-control font-bold"
                                   maxlength="50" placeholder="Product Name" value="" required />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="metricAmountBox">
                        <label class="control-label col-md-2" for="statusSuggest">Status</label>
                        <div class="form-group col-md-4">
                            <div id="statusSuggest" class="form-control ms-ctn statusSuggest">

                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="metricAmountBox">
                        <label class="control-label col-md-2" for="metricAmountInput">Metric Amount</label>
                        <div class="form-group col-md-9">
                            <input type="number" min="0" name="metricAmountInput" id="metricAmountInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Amount Per Type" value="" required />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="metricTypeInputBox">
                        <label class="control-label col-md-2" for="metricTypeInput">Metric Type</label>
                        <div id="metricType" class="form-group col-md-4">
                            <div id="pMetricSuggest" class="form-control ms-ctn pMetricSuggest">

                            </div>
                            <input type="text" name="customMetricTypeInput" id="customMetricTypeInput" class="form-control font-bold hidden"
                                   maxlength="50" placeholder="Unit Type (eg. Black)" value="" />
                        </div>
                        &emsp;&emsp;&emsp;
                        <div class="form-group col-md-offset-8 ui slider checkbox">
                            <input type="checkbox" name="customUnitSwitch" id="customUnitSwitch">
                            <label>Custom Unit</label>
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="stockBox">
                        <label class="control-label col-md-2" for="qtyInput">Stock</label>
                        <div class="form-group col-md-9">
                            <input type="number" min="0" name="qtyInput" id="qtyInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Stock" value="" required />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="tiqInputBox">
                        <label class="control-label col-md-2" for="tiqInput">TIQ</label>
                        <div class="form-group col-md-10">
                            <input type="number" min="0" name="tiqInput" id="tiqInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Threshold Inventory Quantity" value="" required />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="priceInputBox">
                        <label class="control-label col-md-2" for="priceInput">Price</label>
                        <div class="form-group input-group col-md-9">
                            <span class="input-group-addon">$</span>
                            <input type="text" name="priceInput" id="priceInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Price" value="" onkeypress="return isNumberKey(event)" required />
                        </div>
                    </div>
                    <div class="form-group col-md-12" id="rrpInputBox">
                        <label class="control-label col-md-2" for="rrpInput">RRP</label>
                        <div class="form-group input-group col-md-9">
                            <span class="input-group-addon">$</span>
                            <input type="text" name="rrpInput" id="rrpInput" class="form-control font-bold"
                                   maxlength="20" placeholder="Recommended Retail Price" value="" onkeypress="return isNumberKey(event)" required />
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-2 photoUploadMarginFixProducts" for="brandInput">Brand</label>
                        <div class="col-md-5">
                            <div id="brandInput" class="form-group">

                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-2 photoUploadMarginFixProducts" for="fileInput">Photo</label>
                        <div class="col-md-9">
                            <input id="fileInput" name="fileInput" type="file" class="file input-group-lg" multiple />
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-2" for="productProperties">Properties</label>
                        <div id="checkboxContainer" class="col-md-10">
                            <div class="ui slider checkbox">
                                <input type="checkbox" id="publishCheck">
                                <label>Publish product upon save</label>
                            </div><br>
                            <div class="ui slider checkbox">
                                <input type="checkbox" id="descriptionCheck">
                                <label>Product has a description</label>
                            </div><br>
                            <div class="ui slider checkbox">
                                <!-- A Product does not need to comply with the metrics system.
                                In such cases, we'll be creating a row within metrics without
                                any properties and just throw in it's price into the row. -->
                                <input type="checkbox" id="metricsCheck">
                                <label>Product has many variations</label>
                            </div><br>
                            <div class="ui slider checkbox">
                                <input type="checkbox" id="consumableCheck">
                                <label>Product is a consumable</label>
                            </div><br>
                            <div class="ui slider checkbox">
                                <input type="checkbox" id="specialsCheck">
                                <label>Product has a special promotion</label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-12 hidden" id="descriptionBox">
                        <label class="control-label col-md-2" for="descBox">Description</label>
                        <div class="form-group col-md-9">
                            <textarea class="tinymceStart" name="descriptionBox" id="descriptionBox"></textarea>
                        </div>
                    </div>
                    <div class="form-group col-md-12 hidden" id="metricSegment">
                        <label class="control-label col-md-1" for="dataTable">Metrics</label>
                        <div class="col-md-11">
                            <table id="dataTable" class="table table-hover">
                                <div id="customRowBtn" class="pull-right big ui secondary button">
                                    New Custom Row
                                </div>
                                <div id="rowBtn" class="pull-right big ui secondary button">
                                    New Row
                                </div>
                                <thead>
                                    <tr>
                                        <th>Metric Amount</th>
                                        <th>Metric Type</th>
                                        <th>Quantity</th>
                                        <th>Status</th>
                                        <th>Price per type</th>
                                        <th>RRP</th> <!-- Recommended Retail Price -->
                                        <th>&nbsp;</th>
                                    </tr>
                                </thead>
                                <tbody id="metricsTableBody"></tbody>
                            </table>
                        </div>
                    </div>

                    <div class="form-group col-md-12 hidden" id="specialsBox">
                        <label class="control-label col-md-2 photoUploadMarginFixProducts" for="specialInput">Specials</label>
                        <div class="col-md-6">
                            <div id="specialInput" class="form-group">

                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-1"></label>
                        <div class="col-md-10">
                            <div class="pull-right">
                                <input type="button" class="btn btn-primary" value="Save" id="saveButton" />
                                <a class="btn btn-default" asp-action="Index" asp-controler="Products">Cancel</a>
                            </div>
                        </div>
                    </div>
            </div>
            </form>
        </div><!-- end of div element which has the class="panel-body" -->
    </div><!-- end of the div element which has the class="panel" -->
</div><!-- end of the div element which as the  class="col-md-offset-2 col-sm-8"-->
</div><!-- end of div element with class="row" -->

<script>
    var customMetric = 0;
    var isPublished = 0;
    var isConsumable = 0;
    var PresetMetricData = [];
    var StatusData = [];
    var metricsTable = $('#metricSegment');

    // We define the li elements to parse into
    var $presetElements = '';
    var $statusElements = '';

    // Money Input Checker
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
          && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    $('.pMetricSuggest').magicSuggest({
        required: true,
        style: 'border-radius: 0 !important',
        maxSelection: 1,
        allowFreeEntries: false,
        method: 'get',
        data: 'http://localhost:5008/API/PresetMetrics',
        dataType: 'json',
        displayField: 'metricSubType',
        valueField: 'pMetricId',
        groupBy: 'metricType',
        renderer: function (data) {
            return '<div style="padding: 5px;">' +
                //'<div style="float: left;"><img height="75px" width="75px" src="' + data.photoUrl + '" /></div>' +
                '<div style="float: left; margin-left: 5px">' +
                    '<div style="font-weight: bold; color: #333; font-size: 15px; line-height: 11px">' + data.metricSubType + '</div>' +
                    '<div style="color: #999; font-size: 9px">' + data.metricType + '</div>' +
                '</div>' +
            '</div><div style="clear:both;"></div>'; // make sure we have closed our dom stuff
        }
    });

    // Status GET Method
    var $dCTForStatus = jQuery.ajax({
        contentType: 'application/json',
        method: 'get',
        url: 'http://localhost:5008/API/Status',
    });
    $dCTForStatus.done(function (data, textStatus, jqXHR) {
        for (i = 0; i < data.length; i++) {
            var liElement = "";
            var status = data[i];
            StatusData.push(status);

            // Toss the data into the element storage variable as well
            liElement = "<option value=" + status.statusId + ">" + status.statusName + "</option>";

            $statusElements += liElement;
        }
        $('metricTypeInput').append($statusElements);

    });
    $dCTForStatus.fail(function (data, textStatus, jqXHR) {
        swal("Oh no!", data.responseJSON.message, "error");
    });
    
    var descriptionBox = $('#descriptionBox');

    tinymce.init({
        selector: '.tinymceStart',
        height: 250,
        theme: 'modern',
        plugins: [
          'advlist autolink lists link image charmap print preview hr anchor pagebreak',
          'searchreplace wordcount visualblocks visualchars code fullscreen',
          'insertdatetime media nonbreaking save table contextmenu directionality',
          'emoticons template paste textcolor colorpicker textpattern imagetools'
        ],
        toolbar1: 'insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
        toolbar2: 'print preview media | forecolor backcolor emoticons',
        image_advtab: true,
        //content_css: [
        //  '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
        //  '//www.tinymce.com/css/codepen.min.css'
        //]
    });
    
    $('#publishCheck').on('click', function () {
        if (isPublished = 0) {
            isPublished = 1;
        } else {
            isPublished = 0;
        }
    });

    $('#customUnitSwitch').on('click', function () {
        if ($('#customMetricTypeInput').hasClass('hidden')) {
            customMetric = 1;
            $('#pMetricSuggest').magicSuggest({
                required: false
            });
            $('#pMetricSuggest').addClass('hidden')
            $('#customMetricTypeInput').removeClass('hidden');
        } else {
            customMetric = 0;
            $('#pMetricSuggest').magicSuggest({
                required: true
            });
            $('#pMetricSuggest').removeClass('hidden')
            $('#customMetricTypeInput').addClass('hidden');
        }
    });

    $('#descriptionCheck').on('click', function () {
        if (descriptionBox.hasClass('hidden')) {
            descriptionBox.removeClass('hidden');
        } else {
            descriptionBox.addClass('hidden');
        }
    })
    ;

    $('#metricsCheck').on('click', function () {
        if (metricsTable.hasClass('hidden')) {
            metricsTable.removeClass('hidden');
            $('#metricAmountBox').addClass('hidden');
            $('#metricTypeInputBox').addClass('hidden');
            $('#stockBox').addClass('hidden');
            $('#metricTypeInputBox').addClass('hidden');
            $('#qtyInputBox').addClass('hidden');
            $('#priceInputBox').addClass('hidden');
            $('#rrpInputBox').addClass('hidden');

        } else {
            metricsTable.addClass('hidden');
            $('#metricAmountBox').removeClass('hidden');
            $('#metricTypeInputBox').removeClass('hidden');
            $('#qtyInputBox').removeClass('hidden');
            $('#priceInputBox').removeClass('hidden');
            $('#rrpInputBox').removeClass('hidden');
            $('#stockBox').removeClass('hidden');
        }
    })
    ;

    $('#consumableCheck').on('click', function () {
        if (isConsumable = 0) {
            isConsumable = 1;
        } else {
            isConsumable = 0;
        }
    })
    ;

    $('#specialsCheck').on('click', function () {
        if ($('specialsBox').hasClass('hidden')) {
            $('specialsBox').removeClass('hidden');
        } else {
            $('specialsBox').addClass('hidden');
        }
    })
    ;


    var brandInput = $('#brandInput').magicSuggest({
        required: true,
        maxSelection: 1,
        allowFreeEntries: false,
        method: 'get',
        data: 'http://localhost:5008/API/Brands',
        dataType: 'json',
        displayField: 'brandName',
        valueField: 'brandId',
        renderer: function (data) {
            return '<div style="padding: 5px;">' +
                '<div style="float: left;"><img height="75px" width="75px" src="' + data.photoUrl + '" /></div>' +
                '<div style="float: left; margin-left: 5px">' +
                    '<div style="font-weight: bold; color: #333; font-size: 15px; line-height: 11px">' + data.brandName + '</div>' +
                    //'<div style="color: #999; font-size: 9px">' + data.email + '</div>' +
                '</div>' +
            '</div><div style="clear:both;"></div>'; // make sure we have closed our dom stuff
        }
    });
    
    //var specialInput = $('#specialInput').magicSuggest({
    //    maxSelection: 1,
    //    allowFreeEntries: false,
    //    method: 'get',
    //    data: 'http://localhost:5008/API/Specials',
    //    dataType: 'json',
    //    displayField: 'brandName',
    //    valueField: 'brandId',
    //    renderer: function (data) {
    //        return '<div style="padding: 5px;">' +
    //            '<div style="float: left;"><img height="75px" width="75px" src="' + data.photoUrl + '" /></div>' +
    //            '<div style="float: left; margin-left: 5px">' +
    //                '<div style="font-weight: bold; color: #333; font-size: 15px; line-height: 11px">' + data.brandName + '</div>' +
    //                //'<div style="color: #999; font-size: 9px">' + data.email + '</div>' +
    //            '</div>' +
    //        '</div><div style="clear:both;"></div>'; // make sure we have closed our dom stuff
    //    }
    //});

    // Start of Product Image Element

    window.$productPhotoInputElement = $('#fileInput');

    var footerTemplate = '<div class="file-thumbnail-footer">\n' +
    '    <div class="file-caption-name" style="width:{width}">{caption}</div>\n' +
    '    {actions}\n' +
    '</div>';
    var actionTemplate = '<div class="file-actions">\n' +
     '       <div class="file-footer-buttons">\n {delete} </div>\n' +
     '    <div class="file-upload-indicator" tabindex="-1" title="{indicatorTitle}">{indicator}</div>\n' +
     '    <div class="clearfix"></div>\n' +
     '</div>';

    $('#fileInput').fileinput({
        previewFileType: 'image',
        allowedFileTypes: ['image'],
        uploadUrl: '/API/Products/UploadProductPhotosAndSaveProductData',
        uploadAsync: false,
        maxFileCount: 3,
        layoutTemplates: { footer: footerTemplate, actions: actionTemplate },
        type: 'post',
        msgInvalidFileType: 'Invalid type for file "{name}". Only "{types}" files are supported.',
        autoReplace: true,
        overwriteInitial: false,
        showUploadedThumbs: false,
        showUpload: false,
        showRemove: false,
        browseClass: 'btn btn-primary btn-md pull-right',
        previewFileIcon: '<i class="glyphicon glyphicon-king"></i>',
        allowedFileExtensions: ['jpg', 'jpeg', 'png'],
        uploadExtraData: function () {  // callback example
            var out = {};
            return out;
        }
    });
    window.$productPhotoInputElement.on('filebatchuploadsuccess',
                         function (event, data, previewId, index) {
                             var form = data.form, files = data.files, extra = data.extra,
                                 response = data.response, reader = data.reader;
                             swal("Hurray!", data.responseJSON.message, "Success");
                         });

    // End of Product Image Element

    $(document).ready(function () {
        // Custom Metric Row
        $("#customRowBtn").click(function () {
            $("#metricsTableBody").append(
                '<tr valign="top">' +
                '<td name="metricAmountField">' +
                '<input type="text" class="form-control font-bold" id="metricAmount" name="metricAmount" value="" placeholder="Metric Amount" />' +
                '</td>' +
                '<td name="metricTypeField">' +
                '<div class="form-control pMetricSuggest" id="metricTypeInput" name="metricTypeInput">' +
                '</div>' +
                '</td>' +
                '<td>' +
                '<input type="number" min="0" pattern="[0-9]" class="form-control font-bold" id="qtyInput" name="qtyInput" value="" placeholder="Stock" />' +
                '</td>' +
                '<td>' +
                '<select class="form-control selectpicker" id="statusInput" name="statusInput">' +
                $statusElements +
                '</select>' +
                '</td>' +
                '<td>' +
                '<input type="number" class="form-control font-bold" id="pptInput" name="pptInput" value="" placeholder="Price" onkeypress="return isNumberKey(event)"/>' +
                '</td>' +
                '<td>' +
                '<input type="text" class="form-control font-bold" id="rrpInput" name="rrpInput" value="" placeholder="RRP" onkeypress="return isNumberKey(event)"/>' +
                '</br><a href="javascript:void(0);" class="remRow btn btn-danger inline">Remove</a>' +
                '</td>' +
                '</tr>');
            $('.selectpicker').selectpicker({
                style: 'btn-info',
                size: 3
            });
        });
        
        // Preset Metric Row
        $("#rowBtn").click(function () {
            $("#metricsTableBody").append(
                '<tr valign="top">' +
                '<td name="metricAmountField">' +
                '<input type="text" class="form-control font-bold" id="metricAmount" name="metricAmount" value="" placeholder="Metric Amount" />' +
                '</td>' +
                '<td name="metricTypeField">' +
                '<div id="metricTypeInput" class="form-control pMetricSuggest">' +
                '</div>' +
                '</td>' +
                '<td>' +
                '<input type="number" min="0" pattern="[0-9]" class="form-control font-bold" id="qtyInput" name="qtyInput" value="" placeholder="Quantity" />' +
                '</td>' +
                '<td>' +
                '<div class="form-control col-md-2 statusSuggest" id="statusInput" name="statusInput">' +
                //$statusElements +
                '</div>' +
                '</td>' +
                '<td>' +
                '<input type="number" class="form-control font-bold" id="pptInput" name="pptInput" value="" placeholder="Price" onkeypress="return isNumberKey(event)"/>' +
                '</td>' +
                '<td>' +
                '<input type="number" class="form-control font-bold" id="rrpInput" name="rrpInput" value="" placeholder="RRP" onkeypress="return isNumberKey(event)"/>' +
                '</br><a href="javascript:void(0);" class="remRow btn btn-danger inline">Remove</a>' +
                '</td>' +
                '</tr>'
                );

        });

        $("#metricsTableBody").on('click', '.remRow', function () {
            // This = Button
            // Parent = Column
            // Parent = Row
            // lol
            $(this).parent().parent().remove();
        });

        // Preset Metric Magic Suggest Initializer
        $('.pMetricSuggest').magicSuggest({
            required: true,
            style: 'border-radius: 0 !important',
            maxSelection: 1,
            allowFreeEntries: false,
            method: 'get',
            data: 'http://localhost:5008/API/PresetMetrics',
            dataType: 'json',
            displayField: 'metricSubType',
            valueField: 'pMetricId',
            groupBy: 'metricType',
            renderer: function (data) {
                return '<div style="padding: 5px;">' +
                    //'<div style="float: left;"><img height="75px" width="75px" src="' + data.photoUrl + '" /></div>' +
                    '<div style="float: left; margin-left: 5px">' +
                        '<div style="font-weight: bold; color: #333; font-size: 15px; line-height: 11px">' + data.metricSubType + '</div>' +
                        '<div style="color: #999; font-size: 9px">' + data.metricType + '</div>' +
                    '</div>' +
                '</div><div style="clear:both;"></div>'; // make sure we have closed our dom stuff
            }
        });

        // Status Magic Suggest Initializer
        $('.statusSuggest').magicSuggest({
            required: true,
            style: 'border-radius: 0 !important',
            maxSelection: 1,
            allowFreeEntries: false,
            method: 'get',
            data: 'http://localhost:5008/API/Status',
            dataType: 'json',
            displayField: 'statusName',
            valueField: 'statusId',
            renderer: function (data) {
                return '<div style="padding: 5px;">' +
                    //'<div style="float: left;"><img height="75px" width="75px" src="' + data.photoUrl + '" /></div>' +
                    '<div style="float: left; margin-left: 5px">' +
                        '<div style="font-weight: bold; color: #333; font-size: 15px; line-height: 11px">' + data.statusName + '</div>' +
                        //'<div style="color: #999; font-size: 9px">' + data.metricType + '</div>' +
                    '</div>' +
                '</div><div style="clear:both;"></div>'; // make sure we have closed our dom stuff
            }
        });
    });

    // Function Constructor for creating a metrics object
    function Metric(inMetricAmount, inMetricType, inQuantity, inPrice, inRRP, inStatus) {
        this.MetricAmount = inMetricAmount;
        this.MetricType = inMetricType;
        this.Quantity = inQuantity;
        this.Price = inPrice;
        this.RRP = inRRP;
        this.Status = inStatus;
    }

    //Using a function technique to create a JavaScript class, WebFormData
    // Special promotions & Consumable Entities unscripted
    function WebFormData(inProdName, inMetricAmount, inMetricType, inCustomMetricType, inQuantity, inTiQ, inPrice, inRRP, inBrandId, inPublished, inDescription, inMetrics, inIsConsumable) {
        this.ProdName = inProdName;
        this.MetricAmount = inMetricAmount;
        this.MetricType = inMetricType;
        this.customMetricType = inCustomMetricType;
        this.Quantity = inQuantity;
        this.ThresholdInventoryQuantity = inTiQ;
        this.Price = inPrice;
        this.RRP = inRRP;
        this.BrandId = inBrandId;
        this.Published = inPublished;
        this.Description = inDescription;
        this.Metrics = inMetrics;
        this.isConsumable = inIsConsumable;
    }

    $('#saveButton').on('click', function () {
        // Product Name
        var collectedProdName = $('#prodNameInput').val();
        if (collectedProdName == null || collectedProdName == "") {
            swal("Error!", "Please enter a product name! ", error);
            return; // Break out of the function
        }

        // Brand id
        var collectedBrandId = brandInput.getValue().toString(); // Brand Id
        if (collectedBrandId == null || collectedBrandId == "") {
            swal("Error!", "Please select a brand!", "error")
            return; // Break out of the function
        }

        // Description
        var collectedDescription;
        if ($('#descriptionBox').hasClass('hidden')) {
            collectedDescription = null
        } else {
            collectedDescription = tinyMCE.get('descriptionBox').getContent();
        }

        var collectedPublished = isPublished;
        var collectedConsumable = isConsumable;


        if ($('#metricSegment').hasClass('hidden')) {
            // If there are no custom sizes or variations
            var collectedMetricAmount = $('metricAmountInput').val();
            if (customMetric == 1) {
                var customCollectedMetricType = pMetricInput.val();
                var collectedMetricType = null;
            } else {
                var customCollectedMetricType = null;
                var collectedMetricType = pMetricInput.getValue().toString();
            }
            var collectedQuantity = $('#qtyInput').val();
            var collectedTIQ = $('#tiqInput').val();
            var collectedPrice = $('#priceInput').val();
            var collectedRRP = $('#rrpInput').val();
            var collectedMetrics = null; // Undone, need a for loop to pull all tables

        } else {
            // If there are custom variations, we'll have to utitilize the Metrics system
            var collectedTIQ = $('#tiqInput').val(); // Only this is still needed
            var collectedMetricAmount = null;
            var customCollectedMetricType = null;
            var collectedMetricType = null;
            var collectedQuantity = null;
            var collectedPrice = null;
            var collectedRRP = null;
            var MetricData = [];

            // Look for the table
            var table = document.getElementById("metricsTableBody");

            // For each row in metricsTableBody
            for (var i = 0, row; row = table.rows[i]; i++) {
                // iterate through rows

                // Define the attributes of each Metric
                var MetricAmount = '';
                var MetricType = '';
                var Quantity = '';
                var Price = '';
                var RRP = '';
                var Status = '';

                for (var j = 0, col; col = row.cells[j]; j++) {
                    switch (j) {
                        case 0: // Metric Amount
                            MetricAmount = row.cells[j].children[0].value;
                            break;
                        case 1: // Metric Type
                            // Dropdown box
                            // I'm only getting the name of the preset metric..
                            // It'll be easier if we can pull the Id instead
                            //MetricType = 
                            // $('select#loltesting').val();
                            console.dir(row.cells[j].children[0].selectpicker().getValue());
                            break;
                        case 2: // Quantity
                            Quantity = row.cells[j].children[0].value;
                            break;
                        case 3: // Status
                            Status = row.cells[j].children[0].innerText.trim();
                            break;
                        case 4: // Price per type
                            Price = row.cells[j].children[0].value;
                            break;
                        case 5:
                            RRP = row.cells[j].children[0].value;
                            break;
                        default:
                            swal("Error!", "Something went wrong..", "error");
                    }
                }
                // Finally we push the metric object to the MetricData
                MetricData.push(new Metric(MetricAmount, MetricType, Quantity, Price, RRP, Status));
            }            
        }

        // Create the object for POST
        //(inProdName, inMetricAmount, inMetricType, inQuantity, inTiQ, inPrice, inRRP, inBrandId, inPublished,
        // inDescription, inMetrics, inIsConsumable)
        var webFormData = new WebFormData(collectedProdName, collectedMetricAmount, collectedMetricType, customCollectedMetricType,
            collectedQuantity, collectedTIQ, collectedPrice, collectedRRP, collectedBrandId, collectedPublished,
            collectedDescription, collectedMetrics, collectedConsumable);

        //Serialize the webFormData object which contains the type name
        //data into a flat string. So that, it can be sent accross the Internet network successfully.
        var webFormDataInString = JSON.stringify(webFormData);

        return;

        $saveProductHandler = jQuery.ajax({
            method: 'post',
            contentType: 'application/json',
            url: '/Api/Products/SaveNewProductInformationInSession',
            data: "'" + webFormDataInString + "'"
        });
        $saveProductHandler.done(function (data, textStatus, jqXHR) {
            // If no images are uploaded, we'll post with a stock image
            if ($('#fileInput').get(0).files.length == 0) {
                $saveProductDBHandler = jQuery.ajax({
                    method: 'post',
                    contentType: 'application/json',
                    url: '/Api/Products/SaveProductData',
                    data: "'" + webFormDataInString + "'"
                });
                $saveProductDBHandler.done(function (data, textStatus, jqXHR) {
                    swal("Hurray!", data.responseJSON.message, "Success");
                });
                $saveProductDBHandler.fail(function (data, textStatus, jqXHR) {
                    swal("Oh no!", data.responseJSON.message, "error");
                });
            } else {
                window.$productPhotoInputElement.fileinput('upload');
            }
        });
        $saveProductHandler.fail(function (data, textStatus, jqXHR) {
            swal("Oh no!", data.responseJSON.message, "error");
        });
    });//end of $('#saveButton').on('click', function () {

</script>
